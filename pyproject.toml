
[project]
name = "aiohttp_msal"
version = "0.8.5"
description = "Helper Library to use the Microsoft Authentication Library (MSAL) with aiohttp"
keywords = ["msal", "oauth", "aiohttp", "asyncio"]
readme = "README.md"
authors = [{ name = "Johann Kellerman", email = "kellerza@gmail.com" }]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
requires-python = ">=3.11"
dependencies = [
    "attrs>=25.3.0,<26",
    "aiohttp>=3.11.18,<3.13",
    "aiohttp_session>=2.12.1,<3",
    "msal>=1.32.3,<2",
]
license = { text = "MIT" }

[project.urls]
Homepage = "https://github.com/kellerza/aiohttp_msal"

[project.optional-dependencies]
aioredis = ["aiohttp_session[aioredis]>=2.12.1,<3"]

[dependency-groups]
dev = [
    "mypy",
    "types-redis",
    "pytest",
    "pytest-aiohttp",
    "pytest-asyncio",
    "pytest-cov",
    "pytest-env",
]

[build-system]
requires = ["uv-build"]    # >=0.5.15,<0.6
build-backend = "uv_build"

[tool.mypy]
disallow_untyped_defs = true
ignore_missing_imports = true

[tool.codespell]
skip = ["build/*", "*.json", "*.csv", "**/node_modules/*", "./s2-js/dist/*"]
#ignore-words-list = []

[tool.ruff]
include = ["tests/*.py", "aiohttp_msal/**/*.py"]

[tool.ruff.format]
line-ending = "lf"
docstring-code-format = true

[tool.ruff.lint]
select = [
  "A",     # flake8-builtins
  "ASYNC", # flake8-async
  "B",     # bugbear
  "D",     # pydocstyle
  "E",     # pycodestyle
  "F",     # pyflakes
  "I",     # isort
  "PGH",   # pygrep-hooks
  "PIE",   # flake8-pie
  "PL",    # pylint
  "PTH",   # flake8-pathlib
  "PYI",   # flake8-pyi
  "RUF",   # ruff
  "UP",    # pyupgrade
  "W",     # pycodestyle
]
ignore = [
  "E203",
  "E501",
  "D203",
  "D213",
  "PLR2004",
  "UP047",
  "PLC0415",
  "PLW2901",
]

[tool.ruff.lint.isort]
no-lines-before = ["future", "standard-library"]

[tool.pytest.ini_options]
pythonpath = [".", "src"]
filterwarnings = "ignore:.+@coroutine.+deprecated.+"
norecursedirs = [".git", "modules"]
log_cli = true
log_cli_level = "DEBUG"
asyncio_mode = "auto"
addopts = "--cov=aiohttp_msal --cov-report xml:cov.xml"
asyncio_default_fixture_loop_scope = "function"

env = [
    "X_SP_APP_PW=p1",
    "X_SP_APP_ID=i1",
    "X_SP_AUTHORITY=a1",

    "Y_SP_APP_PW=p2",
    "Y_SP_APP_ID=i2",
    "Y_SP_AUTHORITY=a2",

    "A_NUM=5",
    "A_BOOL=True",

    "B_NUM=10",
    "B_BOOL=False",
    "B_ROOT=/c/",
]

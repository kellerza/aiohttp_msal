[build-system]
build-backend = "uv_build"
requires = [ "uv-build" ]  # >=0.5.15,<0.6

[project]
name = "aiohttp-msal"
version = "1.0.1"
description = "Helper Library to use the Microsoft Authentication Library (MSAL) with aiohttp"
readme = "README.md"
keywords = [ "aiohttp", "asyncio", "msal", "oauth" ]
license = { text = "MIT" }
authors = [ { name = "Johann Kellerman", email = "kellerza@gmail.com" } ]
requires-python = ">=3.11"
classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "Natural Language :: English",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
]
dependencies = [
  "aiohttp>=3.11.18,<3.13",
  "aiohttp-session>=2.12.1,<3",
  "attrs>=25.3,<26",
  "msal>=1.32.3,<2",
]
optional-dependencies.aioredis = [ "aiohttp-session[aioredis]>=2.12.1,<3" ]
urls.Homepage = "https://github.com/kellerza/aiohttp_msal"

[dependency-groups]
dev = [
  "mypy",
  "pytest",
  "pytest-aiohttp",
  "pytest-asyncio",
  "pytest-cov",
  "pytest-env",
  "types-redis",
]

[tool.ruff]
include = [ "aiohttp_msal/**/*.py", "tests/*.py" ]

format.line-ending = "lf"
format.docstring-code-format = true
lint.select = [
  "A",     # flake8-builtins
  "ASYNC", # flake8-async
  "B",     # bugbear
  "D",     # pydocstyle
  "E",     # pycodestyle
  "F",     # pyflakes
  "I",     # isort
  "PGH",   # pygrep-hooks
  "PIE",   # flake8-pie
  "PL",    # pylint
  "PTH",   # flake8-pathlib
  "PYI",   # flake8-pyi
  "RUF",   # ruff
  "UP",    # pyupgrade
  "W",     # pycodestyle
]
lint.ignore = [
  "D203",
  "D213",
  "E203",
  "E501",
  "PLC0415",
  "PLR2004",
  "PLW2901",
  "UP047",
]
lint.isort.no-lines-before = [ "future", "standard-library" ]

[tool.codespell]
skip = [ "build/*", "*.json", "*.csv", "**/node_modules/*", "./s2-js/dist/*" ]
#ignore-words-list = []

[tool.pytest.ini_options]
pythonpath = [ ".", "src" ]
filterwarnings = "ignore:.+@coroutine.+deprecated.+"
norecursedirs = [ ".git", "modules" ]
log_cli = true
log_cli_level = "DEBUG"
asyncio_mode = "auto"
addopts = "--cov=aiohttp_msal --cov-report xml:cov.xml"
asyncio_default_fixture_loop_scope = "function"

env = [
  "X_SP_APP_PW=p1",
  "X_SP_APP_ID=i1",
  "X_SP_AUTHORITY=a1",

  "Y_SP_APP_PW=p2",
  "Y_SP_APP_ID=i2",
  "Y_SP_AUTHORITY=a2",

  "A_NUM=5",
  "A_BOOL=True",

  "B_NUM=10",
  "B_BOOL=False",
  "B_ROOT=/c/",
]

[tool.mypy]
disallow_untyped_defs = true
ignore_missing_imports = true

[tool.semantic_release]
commit = true
tag = true
vcs_release = true
commit_parser = "emoji"
version_toml = [ "pyproject.toml:project.version" ]
build_command = "pip install uv && uv build"
commit_version_number = true

# https://python-semantic-release.readthedocs.io/en/latest/multibranch_releases.html#configuring-multibranch-releases
[tool.semantic_release.branches.main]
match = "main"

[tool.semantic_release.commit_parser_options]
major_tags = [ ":boom:" ]
minor_tags = [ ":rocket:" ]
patch_tags = [ ":ambulance:", ":lock:", ":bug:", ":dolphin:" ]
